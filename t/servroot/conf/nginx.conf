worker_processes  1;
daemon on;
master_process off;
error_log /home/runner/work/lua-resty-limit-traffic/lua-resty-limit-traffic/t/servroot/logs/error.log debug;
pid       /home/runner/work/lua-resty-limit-traffic/lua-resty-limit-traffic/t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
#env LUA_PATH;
#env LUA_CPATH;



http {
    access_log /home/runner/work/lua-resty-limit-traffic/lua-resty-limit-traffic/t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;


    lua_package_path "/home/runner/work/lua-resty-limit-traffic/lua-resty-limit-traffic/../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;/home/runner/work/lua-resty-limit-traffic/lua-resty-limit-traffic/lib/?.lua;;";
    init_by_lua_block {
        local v = require "jit.v"
        -- v.on("/tmp/a.dump")
        require "resty.core"
    }


    lua_shared_dict req 1m;
    lua_shared_dict conn 1m;
    lua_shared_dict count 1m;


    server {
        listen          1984;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
    location = /t {
        content_by_lua_block {
            local limit_conn = require "resty.limit.conn"
            local limit_req = require "resty.limit.req"
            local limit_count = require "resty.limit.count"
            local limit_traffic = require "resty.limit.traffic"

            local lim1 = limit_req.new("req", 3, 2)
            local lim2 = limit_req.new("req", 2, 3)
            local lim3 = limit_conn.new("conn", 4, 1, 2)
            local lim4 = limit_count.new("count", 10, 100)

            local limiters = {lim1, lim2, lim3, lim4}

            ngx.shared.req:flush_all()
            ngx.shared.conn:flush_all()
            ngx.shared.count:flush_all()

            local keys = {"foo", "bar", "foo", "bar"}
            for i = 1, 6 do
                local delay, err = limit_traffic.combine(limiters, keys)
                if not delay then
                    ngx.say("failed to limit traffic: ", err)
                else
                    ngx.say(i, ": ", delay,
                            ", conn committed: ", lim3:is_committed())
                end
                if i == 4 then
                    ngx.sleep(1)
                end
            end
        }
    }

        # End test case config.

        location / {
            root /home/runner/work/lua-resty-limit-traffic/lua-resty-limit-traffic/t/servroot/html;
            index index.html index.htm;
        }
    }
}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
env ASAN_OPTIONS;
env MOCKNOEAGAIN_VERBOSE;
env MOCKNOEAGAIN;
